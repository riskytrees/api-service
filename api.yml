openapi: 3.0.1
info:
  title: attack_tree_modeler
  description: 'API specification for the attack_tree_modeler API service.'
  contact:
    email: na@example.com
  version: 1.0.0
externalDocs:
  description: attack_tree_modeler on GitHub
  url: https://github.com/JosiahOne/attack_tree_modeler
servers:
- url: https://riskytrees.com/api/v1
paths:
  /auth/login:
    get:
      tags:
      - auth
      summary: Second step in OIDC login flow. Returns a session token
      description: If the code provider is provided, this validates the user and returns a signed JWT to be used with riskytrees requests.
      operationId: loginUserStep2
      parameters:
        - in: query
          name: code
          description: OAuth 2.0 code
          schema:
            type: string
          required: false
        - in: query
          name: state
          description: OAuth state data
          schema:
            type: string
          required: false
        - in: query
          name: scope
          description: OAuth scope data
          schema:
            type: string
          required: false
      responses:
        200:
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
    post:
      tags:
      - auth
      summary: Starts OIDC flow for some provider
      description:  Starts OIDC flow for some provider
      operationId: loginUserStep1
      parameters:
        - in: query
          name: provider
          description: A provider you want to use to login with.
          schema:
            type: string
            enum: [google, github]
          required: false

      responses:
        200:
          description: User logged in successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
  /auth/logout:
    post:
      tags:
      - auth
      summary: Logouts the current user and invalidates the session token
      operationId: logoutUser
      responses:
        200:
          description: User logged out successfully
          content: {}
  /auth/personal/tokens:
    get:
      tags:
      - auth
      summary: Gets a list of personal access tokens you've created.
      description: Gets a list of personal access tokens you've created.
      operationId: getPersonalTokens
      responses:
        200:
          description: Got tokens successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPersonalTokensResponse'

    post:
      tags:
      - auth
      summary: Generates a personal access token.
      description: Generates a personal access token.
      operationId: postPersonalToken
      requestBody:
        description: Metadata on the key, like duration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthPersonalToken'
        required: true
      responses:
        200:
          description: Token generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPersonalTokenResponse'
  /auth/personal/tokens/{id}:
    delete:
      tags:
      - auth
      summary: Deactivates a personal access token
      operationId: deletePersonalToken
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Deactivated successfully
          content: {}
  /projects:
    get:
      tags:
      - project
      summary: Gets a list of projects you have access to
      operationId: getProjects
      responses:
        200:
          description: Got list of projects successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsListResponse'
    post:
      tags:
      - project
      summary: Creates a new empty project
      operationId: createProject
      requestBody:
        description: Initial details about the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
        required: true
      responses:
        200:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
  /projects/{id}:
    get:
      tags:
      - project
      summary: Gets an existing project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      operationId: getProject
      responses:
        200:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProjectResponse'
    put:
      tags:
      - project
      summary: Updates an existing project
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      operationId: updateProject
      requestBody:
        description: Initial details about the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject'
        required: true
      responses:
        200:
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
    delete:
      tags:
      - project
      summary: Deletes a project and all contained trees
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      operationId: deleteProject
      responses:
        200:
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  
  /projects/{id}/trees:
    get:
      tags:
      - project
      summary: Gets a list of trees relevant to this project
      operationId: getTrees
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got list of trees successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTreesResponse'
    post:
      tags:
      - project
      summary: Creates a new empty tree
      operationId: createTree
      requestBody:
        description: Initial details about the tree
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTree'
        required: true
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Tree created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTreeResponse'
  /nodes/{id}:
    get:
      tags:
      - nodes
      summary: Gets a specific node and some relevant metadata
      operationId: getNode
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got node details successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNodeResponse'

  /projects/{projectId}/trees/{treeId}:
    get:
      tags:
      - project
      summary: View details of a single tree
      operationId: getTree
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
        - in: query
          name: configId
          required: false
          schema:
            type: string
      responses:
        200:
          description: Got tree successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeComputedResponse'
    put:
      tags:
      - project
      summary: Updates a tree to match the specified payload.
      operationId: updateTree
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired tree contents
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullTreeData'
      responses:
        200:
          description: Got tree successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeComputedResponse'
    delete:
      tags:
      - project
      summary: Deletes a tree
      operationId: deleteTree
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /projects/{projectId}/trees/{treeId}/public:
    get:
      tags:
      - project
      summary: Used to get whether or not a tree should be made public
      operationId: treePublicGet
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true

      responses:
        200:
          description: Got state successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreePublicityResponse'
    
    put:
      tags:
      - project
      summary: Used to set whether or not a tree should be made public
      operationId: treePublicToggle
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired publicity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TreePublicity'
      responses:
        200:
          description: Change successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreePublicityResponse'

  /projects/{projectId}/trees/{treeId}/undo:
    put:
      tags:
      - project
      summary: Moves the tree back one in the history
      operationId: treeUndo
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Undo successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeComputedResponse'      

  /projects/{projectId}/trees/{treeId}/dag/down:
    get:
      tags:
      - project
      summary: Returns a DAG-like representation of the relationship between this tree and the subtrees of it
      operationId: getTreeDagDown
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: treeId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got DAG successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeDAGResponse'


  /projects/{projectId}/model:
    get:
      tags:
      - project
      summary: View selected model for a project
      operationId: getProjectModel
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got model successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectedModelResponse'
    put:
      tags:
        - project
      summary: Change selected model for a project
      operationId: changeProjectModel
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired model
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectedModel'
      responses:
        200:
          description: Changed model successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectedModelResponse'


  /projects/{projectId}/config:
    get:
      tags:
      - project
      summary: View config of a project
      operationId: getProjectConfig
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got config successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfigResponse'
    put:
      tags:
      - project
      summary: Change selected config of a project
      operationId: switchProjectConfig
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired config id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectConfigIdPayload'
        required: true
      responses:
        200:
          description: Changed config successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfigResponse'
  /projects/{projectId}/configs:
    get:
      tags:
      - project
      summary: View config options of a project
      operationId: getProjectConfigList
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Got config list successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfigListResponse'
    post:
      tags:
      - project
      summary: Add a new config of a project
      operationId: addProjectConfig
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectConfigPayload'
        required: true
      responses:
        200:
          description: Changed config successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfigResponse'
  /projects/{projectId}/configs/{id}:
    get:
      tags:
      - project
      summary: Get an existing config of a project
      operationId: getProjectConfig
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Changed config successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecificProjectConfigResponse'
    put:
      tags:
      - project
      summary: Update an existing config of a project
      operationId: updateProjectConfig
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        description: Desired config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectConfigPayload'
        required: true
      responses:
        200:
          description: Changed config successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecificProjectConfigResponse'

  /models:
    get:
      tags:
      - model
      summary: Gets a list of available models
      operationId: getModels
      responses:
        200:
          description: Got list of models successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelsResponse'
  /orgs:
    get:
      tags:
        - orgs
      summary: Gets list of orgs you have access to
      operationId: getOrgs
      responses:
        200:
          description: Got list of orgs successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrgsResponse'
    post:
      tags:
      - orgs
      summary: Add a new org
      operationId: addOrg
      requestBody:
        description: Desired org config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgMetadataBase'
        required: true
      responses:
        200:
          description: Org created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
  /orgs/{orgId}:
    put:
      tags:
        - orgs
      summary: Updates an org
      operationId: updateOrg
      requestBody:
        description: Desired org config
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgMetadataBase'
        required: true
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Org created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgResponse'
    delete:
      tags:
      - orgs
      summary: Deletes an org
      operationId: deleteOrg
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Deleted response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOrgResponse'    
  /orgs/{orgId}/members:
    get:
      tags:
      - orgs
      summary: Lists members added to the org.
      operationId: listMembersInOrg
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Got members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembersResponse'    
    post:
      tags:
      - orgs
      summary: Add a member to the org by email
      operationId: addMemberToOrg
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      requestBody:
        description: Details on the user to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberPayload'
        required: true
      responses:
        200:
          description: Member added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddMemberResponse'

    delete:
      tags:
      - orgs
      summary: Remove member from org by email.
      description: Remove member from org by email. You can not remove yourself.
      operationId: removeMemberFromOrg
      parameters:
        - in: path
          name: orgId
          schema:
            type: string
          required: true
      requestBody:
        description: Details on the user to remove
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberPayload'
        required: true
      responses:
        200:
          description: Member removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembersResponse'
    

components:
  schemas:
    RegisterUser:
      type: object
      properties:
        email:
          type: string
          format: email


    CreateProject:
      type: object
      properties:
        title:
          type: string
        orgId:
          type: string

    AuthPersonalToken:
      type: object
      properties:
        tokenId:
          type: string


    CreateAuthPersonalToken:
      type: object
      properties:
        expireInDays:
          type: integer
          example: 90

    AuthPersonalTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            tokenId:
              type: string
            personalToken:
              type: string

    AuthPersonalTokensResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            properties:
              tokenId:
                type: string

    AuthLoginResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            sessionToken:
              type: string
            loginRequest:
              type: string
              example:
                https://accounts.google.com/o/oauth2/v2/auth?
                response_type=code&
                client_id=424911365001.apps.googleusercontent.com&
                scope=openid%20email&
                redirect_uri=https%3A//oauth2.example.com/code&
                state=security_token%3D138r5719ru3e1%26url%3Dhttps%3A%2F%2Foauth2-login-demo.example.com%2FmyHome&
                login_hint=jsmith@example.com&
                nonce=0394852-3190485-2490358&
                hd=example.com

    TreePublicity:
      type: object
      properties:
        isPublic:
          type: boolean


    TreePublicityResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      properties:
        result:
          $ref: '#/components/schemas/TreePublicity'

    TreeDagItem:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/TreeDagItem'

    TreeDAGResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            root: 
              $ref: '#/components/schemas/TreeDagItem'

    ProjectConfigListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            ids:
              type: array
              items:
                type: string

    SpecificProjectConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          properties:
            name:
              type: string
            attributes:
              type: object

    ProjectConfigResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          properties:
            id:
              type: string
            attributes:
              type: object

    ProjectConfigPayload:
      type: object
      properties:
        name:
          type: string
        attributes:
          type: object

    ProjectConfigIdPayload:
      type: object
      properties:
        desiredConfig:
          type: string

    GetNodeResponse:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            treeId:
              type: string
              example: "uuid string"

    SelectedModel:
      type: object
      properties:
        modelId:
          type: string

    SelectedModelResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/SelectedModel'

    CreateProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            orgId:
              type: string

    GetProjectResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            projectId:
              type: string
              example: 61aewfhewfh1u124
            name:
              type: string
              example: Project Name
            orgId:
              type: string


    ProjectsListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            projects:
              type: array
              items:
                type: object
                properties:
                  projectId:
                    type: string
                    example: 61aewfhewfh1u124
                  name:
                    type: string
                    example: Project Name
                  orgId:
                    type: string

    GetModelsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            models:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string

    FullNodeData:
      allOf:
        - $ref: '#/components/schemas/CreateNode'
      type: object
      properties:
        id:
          type: string
        children:
          type: array
          items:
            type: integer

    FullComputedNodeData:
      allOf:
        - $ref: '#/components/schemas/CreateNode'
        - $ref: '#/components/schemas/FullNodeData'
      type: object
      properties:
        conditionResolved:
          type: boolean


    CreateNode:
      type: object
      required:
        - title
        - parents
      properties:
        title:
          type: string
        description:
          type: string
        modelAttributes:
          type: object
        conditionAttribute:
          type: string

    NodeResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/FullNodeData'

    ListTreesResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            trees:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string

    FullTreeData:
      allOf:
        - $ref: '#/components/schemas/CreateTree'
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/FullNodeData'
        rootNodeId:
          type: string


    FullComputedTreeData:
      allOf:
        - $ref: '#/components/schemas/CreateTree'
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/FullComputedNodeData'
        rootNodeId:
          type: string


    TreeResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/FullTreeData'


    TreeComputedResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/FullComputedTreeData'

    CreateTree:
      type: object
      properties:
        title:
          type: string

    CreateTreeResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
            title:
              type: string

    OrgMetadataBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        plan:
          type: string
          enum: [standard, organization, public-good]

    OrgMetadata:
      allOf:
        - $ref: '#/components/schemas/OrgMetadataBase'
      type: object
      properties:
        id:
          type: string

    GetOrgsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            result:
              type: object
              properties:
                orgs:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrgMetadata'

    OrgResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/OrgMetadata'

    AddMemberPayload:
      type: object
      properties:
        email:
          type: string
          example: someone@example.com

    AddMemberResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AddMemberPayload'
            
    GetMembersResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object
      properties:
        result:
          type: object
          properties:
            members:
              type: array
              items:
                $ref: '#/components/schemas/AddMemberPayload'

    DeleteOrgResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
      type: object


    ApiResponse:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string
        result:
          type: object
